# Generated by Django 2.2.15 on 2025-02-14 09:56

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('ads', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('phone_number', models.CharField(blank=True, max_length=15)),
                ('profile_pic', models.ImageField(blank=True, default='default-profile-pic.png', null=True, upload_to='uploads/profile-pictures')),
                ('is_seller', models.BooleanField(default=False)),
                ('seller_since', models.DateTimeField(auto_now_add=True)),
                ('store_banner', models.ImageField(blank=True, null=True, upload_to='store_banners/')),
                ('store_logo', models.ImageField(blank=True, null=True, upload_to='store_logos/')),
                ('store_name', models.CharField(blank=True, max_length=100)),
                ('store_description', models.TextField(blank=True)),
                ('business_hours', models.CharField(blank=True, max_length=200)),
                ('whatsapp_number', models.CharField(blank=True, max_length=15)),
                ('preferred_contact_method', models.CharField(choices=[('phone', 'Phone Call'), ('whatsapp', 'WhatsApp'), ('email', 'Email'), ('in_app', 'In-App Message')], default='phone', max_length=20)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_premium', models.BooleanField(default=False)),
                ('main_category', models.CharField(choices=[('electronics', 'Electronics'), ('fashion', 'Fashion'), ('home', 'Home & Living'), ('vehicles', 'Vehicles')], default='electronics', max_length=50)),
                ('is_verified', models.BooleanField(default=False)),
                ('total_sales', models.PositiveIntegerField(default=0)),
                ('total_ads', models.PositiveIntegerField(default=0)),
                ('response_rate', models.FloatField(default=0)),
                ('response_time', models.DurationField(blank=True, null=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('account_status', models.CharField(choices=[('ACTIVE', 'Active'), ('SUSPENDED', 'Suspended'), ('BLOCKED', 'Blocked'), ('VERIFIED', 'Verified')], default='ACTIVE', max_length=20)),
                ('favorite_sellers', models.ManyToManyField(blank=True, related_name='favorited_by', to='profiles.Profile')),
                ('followers', models.ManyToManyField(blank=True, related_name='following', to='profiles.Profile')),
                ('saved_ads', models.ManyToManyField(related_name='saved_by_profiles', through='ads.SavedAd', to='ads.Ads')),
            ],
        ),
        migrations.CreateModel(
            name='SavedSearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('query', models.CharField(max_length=200)),
                ('min_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('max_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_checked', models.DateTimeField(auto_now=True)),
                ('notify_new_matches', models.BooleanField(default=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ads.Category')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(help_text='Rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ad', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ads.Ads')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='given_reviews', to=settings.AUTH_USER_MODEL)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_reviews', to='profiles.Profile')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='profile',
            name='saved_searches',
            field=models.ManyToManyField(blank=True, related_name='saved_by', to='profiles.SavedSearch'),
        ),
        migrations.AddField(
            model_name='profile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['seller', '-created_at'], name='profiles_re_seller__cf0045_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['rating'], name='profiles_re_rating_c43adf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('reviewer', 'seller', 'ad')},
        ),
    ]
